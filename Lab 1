from random import randint
import time

def Miller_Rabbin(n, k=20):
    r = 0
    d = n - 1
    while d % 2 == 0:
        d //= 2
        r += 1

    for _ in range(k):
        a = randint(2, n - 2)
        x = pow(a, d, n)
        if x in (1, n - 1):
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

#Сложение точек
def ec_add(P, Q, a, N):
    if P == "O":
        return Q
    if Q == "O":
        return P

    x1, y1 = P
    x2, y2 = Q

    if x1 == x2 and (y1 + y2) % N == 0:
        return "O"

    if P != Q:
        num = (y2 - y1) % N
        den = (x2 - x1) % N
    else:
        num = (3 * x1 * x1 + a) % N
        den = (2 * y1) % N

    g = gcd(den, N)
    if g != 1 and g != N:
        raise ZeroDivisionError(g)

    try:
        inv = pow(den, -1, N)
    except ValueError:
        raise ZeroDivisionError(gcd(den, N))

    lam = (num * inv) % N
    x3 = (lam * lam - x1 - x2) % N
    y3 = (lam * (x1 - x3) - y1) % N
    return (x3, y3)

#Умножение точки на число
def ec_mul(k, P, a, N):
    R = "O"
    while k:
        if k % 2 == 1:
            R = ec_add(R, P, a, N)
        P = ec_add(P, P, a, N)
        k //= 2
    return R

#Базовый ECM
def ecm_wiki(N, B, tries):
    for _ in range(tries):
        x = randint(1, N - 1)
        y = randint(1, N - 1)
        a = randint(1, N - 1)
        b = (y * y - x * x * x - a * x) % N

        if (y * y - (x * x * x + a * x + b)) % N != 0:
            continue

        P = (x, y)
        k = 1
        for i in range(2, B + 1):
            k = lcm(k, i)

        try:
            ec_mul(k, P, a, N)
        except ZeroDivisionError as e:
            d = e.args[0]
            if 1 < d < N:
                return d
    return None

#Рекурсивная факторизация с ECM
def ecm_full_factor(N, B, tries):
    factors = []

    def recurse(n):
        if n == 1:
            return
        if Miller_Rabbin(n):
            factors.append(n)
            return

        d = ecm_wiki(n, B, tries)
        if d is None or d == n:
            factors.append(n)
            return
        recurse(d)
        recurse(n // d)

    recurse(N)
    return sorted(factors)

N = 2560000044800000171
start = time.time()
factors = ecm_full_factor(N, B=300, tries=250)
end = time.time()

print(f"Простые множители: {factors}")
print(f"Время: {end - start:.4f} сек")
